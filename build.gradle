apply plugin: 'java'
apply plugin: 'maven'

version = (project.hasProperty("teamcity")) ? project.teamcity["build.number"] : 'SNAPSHOT'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    compile 'org.jetbrains:annotations:13.0'
    compile('org.jetbrains.teamcity:common-api:9.0.2') {

        /// exclude corrupted class http://stackoverflow.com/questions/3026956/javassist-failure-in-hibernate-invalid-constant-type-60
        exclude group: 'com.ibm.icu', module: 'icu4j'
        exclude group: 'org.springframework'
    }

    provided 'org.apache.ant:ant:1.7.0'
}


task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude "META-INF/**"
    exclude "**/*.html"
    exclude "**/*.txt"
    exclude "**/*.gif"
    exclude "**/*.res"
    exclude "**/*.xml"
    exclude "**/*.dtd"
    exclude "**/*VERSION"
    exclude "**/*.properties"
    exclude "org/joda/time/tz/data/**"
    exclude "classpath.index"
    exclude "license/**"
    exclude "messages/**"
    exclude "nu/xom/characters.dat"

    entryCompression = ZipEntryCompression.STORED
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    with jar
}

def proguardDestFile(fatJar) {
    return new File(fatJar.destinationDir.path, project.name + "-" + version + "-release.jar")
}

task proguard(dependsOn: fatJar, type: proguard.gradle.ProGuardTask) {
    injars fatJar.archivePath
    outjars proguardDestFile(fatJar)
    printmapping fatJar.destinationDir.path + '/proguard.map'

    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    libraryjars "${System.getProperty('java.home')}/lib/jce.jar"
    libraryjars configurations.provided

    dontwarn '!org.jonnyzzz.teamcity.ant,**'


    optimizationpasses 5
    optimizations "*"
    mergeinterfacesaggressively

    flattenpackagehierarchy "org.jonnyzzz.teamcity.ant.___"

    keep 'public class org.jonnyzzz.teamcity.ant.* { \
            public *; \
    }'

    forceprocessing
}

task jarRelease(dependsOn: [proguard, jar], type: Jar) {
    manifest {
        attributes   \
           'Implementation-Title': 'TeamCity Service Messages for Ant',   \
           'Implementation-Version': version
    }

    baseName = jar.baseName
    destinationDir = file(jar.destinationDir.path + "-release")
    from zipTree(proguardDestFile(fatJar))
}

task test_ant_task() << {
    ant.taskdef(
            name: 'testTeamcityMessages',
            classname: "org.jonnyzzz.teamcity.ant.TeamCityServiceMessageTask") {
        classpath {
            fileset(
                    dir: proguardDestFile(fatJar).getParent(),
                    includes: proguardDestFile(fatJar).getName()
            )
        }
    }
    ant.testTeamcityMessages(name: 'aaa', value: 'bbb')
    ant.testTeamcityMessages(name: 'bbb') {
        param(name: "p1", value: "p2")
        param(name: "p3", value: "p4")
    }


    ant.ant(antFile: 'ant-test-project.xml')
}

task dist(dependsOn: [proguard, jarRelease, test_ant_task]) {

}

repositories {
    mavenCentral()

    maven {
        url "http://repository.jetbrains.com/all"
    }
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    }
}


def shouldDeploy(project) {
    project.hasProperty("teamcity") && project.teamcity["deploy-url"] != null
}

if (shouldDeploy(project)) {
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: project.teamcity["deploy-url"])

                pom.project {
                    name 'TeamCity.AntMessages'
                    description 'TeamCity Service Messages as Ant tasks'
                    packaging 'jar'
                    url 'https://github.com/jonnyzzz/TeamCity.AntMessages'
                    groupId 'org.jonnyzzz'
                }
                pom.whenConfigured { pom ->
                    // with fat jar approach we don't need our own modules to be declared as external dependencies
                    pom.dependencies.removeAll { !it.toString().toLowerCase().contains("ant") }
                }
            }
        }
    }
}

//remove default artifact
configurations.runtime.artifacts.removeAll { it.archiveTask.is jar }
artifacts {
    archives jarRelease
}

task wrapper(type: Wrapper) {
    gradleVersion = 2.3
}
